Program 1:
/*Lex program to take check whether the given number is even or odd */
%{ #include<stdio.h> int i;
%}
%%
[0-9]+ {i=atoi(yytext); if(i%2==0)
printf("Even"); else
printf("Odd");} %%
int yywrap(){}
/* Driver code */ int main()
{
yylex();
return 0; }



Program 2:
/* Lex Program to check whether a number is Prime or Not */
%{
/* Definition section */ #include<stdio.h> #include<stdlib.h>
int flag,c,j;
%}
/* Rule Section */
%%
[0-9]+ {c=atoi(yytext);
if(c==2) {
printf("\n Prime number"); }
else if(c==0 || c==1) {
printf("\n Not a Prime number"); }
else

{ for(j=2;j<c;j++)
{ if(c%j==0)
flag=1; }
if(flag==1)
printf("\n Not a prime number");
else if(flag==0)
printf("\n Prime number");
} }
%%
// driver code int main()
{ yylex(); return 0;
}





Program 3:
/*lex program to count words that are less than 5 and greater than 2 */
%{
int len=0, counter=0;
%}
%%
[a-zA-Z]+ { len=strlen(yytext);
if(len<10 && len>5) {counter++;} }
%%
int yywrap (void ) {
return 1; }
int main() {
printf("Enter the string:"); yylex();
printf("\n %d", counter); return 0;
}





Program 4:
LEX program to count the number of vowels and consonants in given string.
%{
int vow_count=0; int const_count =0;
%}
%%
[aeiouAEIOU] {vow_count++;} [a-zA-Z] {const_count++;}
%%
main() {
printf("Enter the string of vowels and consonents:"); yylex();
printf("Number of vowels are: %d\n", vow); printf("Number of consonants are: %d\n", cons); return 0;
}




Program 5:
/*Lex code to count total number of tokens */ 
Input: int p=0, d=1, c=2;

%{
int n = 0 ; %}
// rule section
%%
//count number of keywords
"while"|"if"|"else" {n++;printf("\t keywords : %s", yytext);}
// count number of keywords
"int"|"float" {n++;printf("\t keywords : %s", yytext);}
// count number of identifiers
[a-zA-Z_][a-zA-Z0-9_]* {n++;printf("\t identifier : %s", yytext);}
// count number of operators
"<="|"=="|"="|"++"|"-"|"*"|"+" {n++;printf("\t operator : %s", yytext);}
// count number of separators
  
[(){}|, ;] {n++;printf("\t separator : %s", yytext);}
// count number of floats
[0-9]*"."[0-9]+ {n++;printf("\t float : %s", yytext);}
// count number of integers
[0-9]+ {n++;printf("\t integer : %s", yytext);}
.; %%
int main() {
yylex();
printf("\n total no. of token = %d\n", n); }





Program 6: /*lex code to determine whether input is an identifier or not*/
%{
#include <stdio.h>
% }
/* Rule section */ %%
// regex for valid identifiers
[a-z A-Z_][a - z A - Z 0 - 9 _] *
// regex for invalid identifiers
printf("Valid Identifier");
^[a - z A - Z _] printf("Invalid Identifier"); .;
%%
main() {
yylex(); }






Program 7: /* Lex program to check whether input is digit or not. */
%{ #include<stdio.h> #include<stdlib.h> %}
/* Rule Section */
%%
[0-9]* printf("digit"); ^[^0-9]|[0-9]*[a-zA-Z] printf("not a digit"); .;
%%
int main() {
yylex();
return 0; }







Program 8: /*lex program to count number of words*/
%{ #include<stdio.h> #include<string.h> int i = 0;
%}
/* Rules Section*/
%%
([a-zA-Z0-9])* {i++;} /* Rule for counting number of words*/
"\n" {printf("%d\n", i); i = 0;} %%
int yywrap(void){}
int main() {
yylex();
return 0; }



Program 9: /*lex program to find the length of a string*/
%{ #include<stdio.h> int length;
%}
/* Rules Section*/ %%
[a-z A-Z 0-9]+ {length=yyleng; } %%
int main() {
yylex();
printf("length of given string is : %d", length); return 0;
}




Program 10: /*lex program to implement a simple calculator*/
%{
int op = 0, i; float a, b;
%}
dig [0-9]+|([0-9]*)"."([0-9]+) add "+"
sub "-"
mul "*"
div "/" pow "^" ln \n %%
/* digi() is a user defined function */ {dig} {digi();}
{add} {op=1;}
{sub} {op=2;}
{mul} {op=3;}
{div} {op=4;}
{pow} {op=5;}
{ln} {printf("\n The Answer :%f\n\n",a);}
%% digi() {
if(op==0)
/* atof() is used to convert
- the ASCII input to float */
a=atof(yytext);
else
{ b=atof(yytext);
switch(op) {
case 1:a=a+b; break;
case 2:a=a-b; break;
case 3:a=a*b; break;
case 4:a=a/b; break;
case 5:for(i=a;b>1;b--) a=a*i;
break;
} op=0;

} }
main(int argv,char *argc[]) {
yylex(); }
yywrap() {
return 1; }
